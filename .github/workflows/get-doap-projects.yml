name: Get DOAP projects
# Test with act
# act -j extract-doap-rdf -s GITHUB_TOKEN=

on:
  workflow_dispatch:
  # schedule:
  #   - cron: '0 2 * * *'
    # Everyday at 2am
  push:
    branches: [ master ]
    paths:
    - '.github/workflows/get-doap-projects.yml'

jobs:
  # get-external-projects:
  #   runs-on: ubuntu-latest
  #   # if: always()
  #   strategy:
  #     matrix: 
  #       external-doap-files: ['https://raw.githubusercontent.com/kodymoodley/simpleowlapi/main/doap-project.ttl']

  #   steps:
  #   - run: wget ${{ matrix.external-doap-files }}

  #   - name: Upload RDF output artifact
  #     if: ${{ matrix.doap-file.node.object != null }}
  #     uses: actions/upload-artifact@v1
  #     with:
  #       name: rdf-output
  #       path: doap-rdf

  #   - name: Upload the RDF to the triplestore
  #     uses: MaastrichtU-IDS/RdfUpload@master
  #     with:
  #       file: doap-rdf/*
  #       endpoint: https://graphdb.dumontierlab.com/repositories/ids-projects/statements
  #       user: ${{ secrets.GRAPHDB_USER }}
  #       password: ${{ secrets.GRAPHDB_PASSWORD }}
  #       graph: "https://w3id.org/umids/graph/projects"

  
  get-doap-projects:
    runs-on: ubuntu-latest
    outputs:
      # matrix: ${{ toJson(steps.set-matrix.outputs.matrix.search.edges) }}
      matrix: ${{ toJson(fromJson(steps.get_doap_files.outputs.data).search.edges) }}
    steps: 
    - uses: actions/checkout@v2
    
    # https://developer.github.com/v4/explorer/
    - uses: octokit/graphql-action@v2.2.5
      id: get_doap_files
      with:
        query: |
          {
            search(query: "org:MaastrichtU-IDS", type: REPOSITORY, last: 100) {
              edges {
                node {
                  ... on Repository {
                    nameWithOwner
                    name
                    object(expression: "master:doap-project.ttl") {
                      ... on Blob {
                        text
                      }
                    }
                  }
                }
                cursor
              }
              pageInfo {
                endCursor
                hasNextPage
              }
            }
          }
      env:
        GITHUB_TOKEN: ${{ secrets.API_GITHUB_TOKEN }}
        # Default token does not have access to private repositories
        # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    # - run: "echo 'DOAP files: ${{ toJson(fromJson(steps.get_doap_files.outputs.data).search.edges) }}'"
    - run: "echo 'DOAP files: ${{ steps.get_doap_files.outputs.data }}'"

    # It would be better to filter the JSON using JQ before using it as a Matrix
    - name: Set matrix after filtering GraphQL output with jq
      id: set-matrix
      # run: echo ::set-output name=matrix::'${{ steps.get_doap_files.outputs.data }} | jq -c 'del(.search.edges[] | select(.node.object == null))'
      ## Also direct var possible:
      # VAR=$(cat <<EOF
      # ${{ steps.get_doap_files.outputs.data }}
      # EOF
      run: |
        cat <<'EOF' >> full_doap.json
        ${{ steps.get_doap_files.outputs.data }}
        EOF
        filtered_json=$( cat full_doap.json | jq -c 'del(.search.edges[] | select(.node.object == null))' )
        filtered_json=${filtered_json//\\n/}
        filtered_json=${filtered_json//\\/}
        echo $filtered_json
        echo '::set-output name=matrix::"'"$filtered_json"'"'

  extract-doap-rdf:
    runs-on: ubuntu-latest
    if: always()
    needs: get-doap-projects
    strategy:
      matrix: 
        doap-file: ${{ fromJson(needs.get-doap-projects.outputs.matrix) }}

    steps:

    # Remove extra quotes from repo_name and file content (to be improved)
    - run: | 
        mkdir -p doap-rdf
        echo ${FILE_CONTENT:1:${#FILE_CONTENT}-2} > doap-rdf/doap_${REPO_NAME//\"}.ttl
      if: ${{ matrix.doap-file.node.object != null }}
      env:
        FILE_CONTENT: ${{ toJson(matrix.doap-file.node.object.text) }}
        REPO_NAME: ${{ toJson(matrix.doap-file.node.name) }}

    # TODO: load DOAP RDF file using URL directly
    # curl -d \
    # '{"type":"url","format":"text/turtle","data":"http://data.bioontology.org/ontologies/ICD9CM/submissions/17/download?apikey=8b5b7825-538d-40e0-9e9e-5ab9274a9aeb","context":"http://data.bioontology.org/ontologies/ICD9CM/"}' \
    # -H 'Content-Type: application/json;charset=UTF-8' \
    # -X POST http://localhost:7200/rest/data/import/upload/disease_diagnosis_dev/url

    - name: Upload RDF output artifact
      if: ${{ matrix.doap-file.node.object != null }}
      uses: actions/upload-artifact@v1
      with:
        name: rdf-output
        path: doap-rdf

    # - name: Clear older graph in the triplestore
    #   uses: vemonet/sparql-operations-action@v1
    #   with:
    #     query: "CLEAR GRAPH <https://w3id.org/umids/graph/projects>"
    #     endpoint: https://graphdb.dumontierlab.com/repositories/ids-projects/statements
    #     user: ${{ secrets.GRAPHDB_USER }}
    #     password: ${{ secrets.GRAPHDB_PASSWORD }}

    - name: Upload the RDF to the triplestore
      uses: MaastrichtU-IDS/RdfUpload@master
      with:
        file: doap-rdf/*
        endpoint: https://graphdb.dumontierlab.com/repositories/ids-projects/statements
        user: ${{ secrets.GRAPHDB_USER }}
        password: ${{ secrets.GRAPHDB_PASSWORD }}
        graph: "https://w3id.org/umids/graph/projects"



